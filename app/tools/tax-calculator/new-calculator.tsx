'use client';

import React, { useState } from 'react';

// Bi·ªÉu thu·∫ø l≈©y ti·∫øn 2024 (Th√¥ng t∆∞ 111/2013/TT-BTC v√† c·∫≠p nh·∫≠t m·ªõi nh·∫•t)
const TAX_BRACKETS = [
  { min: 0, max: 5_000_000, rate: 0.05, description: 'B·∫≠c 1' },
  { min: 5_000_000, max: 10_000_000, rate: 0.10, description: 'B·∫≠c 2' },
  { min: 10_000_000, max: 18_000_000, rate: 0.15, description: 'B·∫≠c 3' },
  { min: 18_000_000, max: 32_000_000, rate: 0.20, description: 'B·∫≠c 4' },
  { min: 32_000_000, max: 52_000_000, rate: 0.25, description: 'B·∫≠c 5' },
  { min: 52_000_000, max: 80_000_000, rate: 0.30, description: 'B·∫≠c 6' },
  { min: 80_000_000, max: Infinity, rate: 0.35, description: 'B·∫≠c 7' }
];

// C√°c m·ª©c gi·∫£m tr·ª´ theo Lu·∫≠t thu·∫ø TNCN 2024
const PERSONAL_DEDUCTION = 11_000_000; // Gi·∫£m tr·ª´ gia c·∫£nh b·∫£n th√¢n (11 tri·ªáu/th√°ng)
const DEPENDENT_DEDUCTION = 4_400_000; // Gi·∫£m tr·ª´ ng∆∞·ªùi ph·ª• thu·ªôc (4.4 tri·ªáu/th√°ng/ng∆∞·ªùi)

// M·ª©c ƒë√≥ng b·∫£o hi·ªÉm cho ng∆∞·ªùi lao ƒë·ªông (theo Lu·∫≠t BHXH 2014)
const INSURANCE_RATES = {
  SOCIAL: 0.08, // BHXH: 8%
  HEALTH: 0.015, // BHYT: 1.5%
  UNEMPLOYMENT: 0.01, // BHTN: 1%
  TOTAL: 0.105 // T·ªïng: 10.5%
};

// M·ª©c l∆∞∆°ng t·ªëi ƒëa ƒë√≥ng b·∫£o hi·ªÉm (20 l·∫ßn l∆∞∆°ng c∆° s·ªü = 20 * 1.8 tri·ªáu = 36 tri·ªáu)
const MAX_INSURANCE_SALARY = 36_000_000;

// ƒê·ªãnh nghƒ©a types cho k·∫øt qu·∫£ t√≠nh thu·∫ø
interface TaxBracket {
  range: string;
  rate: string;
  taxableAmount: string;
  taxOwed: string;
  description: string;
}

interface TaxResult {
  grossSalary: number;
  insurance: number;
  insuranceDetails: {
    social: number;
    health: number;
    unemployment: number;
  };
  taxableIncome: number;
  totalDeduction: number;
  personalDeduction: number;
  dependentDeduction: number;
  taxableBase: number;
  totalTax: number;
  netSalary: number;
  breakdown: TaxBracket[];
  effectiveRate: number;
  marginalRate: number;
}

// H√†m format ti·ªÅn VND
function formatMoney(amount: number): string {
  return new Intl.NumberFormat('vi-VN').format(amount) + ' ƒë';
}

// H√†m t√≠nh b·∫£o hi·ªÉm chi ti·∫øt
function calculateInsurance(grossSalary: number) {
  // L∆∞∆°ng ƒë√≥ng b·∫£o hi·ªÉm kh√¥ng v∆∞·ª£t qu√° m·ª©c t·ªëi ƒëa
  const insuranceSalary = Math.min(grossSalary, MAX_INSURANCE_SALARY);
  
  const social = insuranceSalary * INSURANCE_RATES.SOCIAL;
  const health = insuranceSalary * INSURANCE_RATES.HEALTH;
  const unemployment = insuranceSalary * INSURANCE_RATES.UNEMPLOYMENT;
  const total = social + health + unemployment;
  
  return {
    social,
    health,
    unemployment,
    total,
    insuranceSalary
  };
}

// H√†m t√≠nh thu·∫ø TNCN chi ti·∫øt v√† chu·∫©n x√°c
function calculateTax(grossSalary: number, dependents: number): TaxResult {
  // 1. T√≠nh b·∫£o hi·ªÉm chi ti·∫øt
  const insuranceCalc = calculateInsurance(grossSalary);
  
  // 2. Thu nh·∫≠p ch·ªãu thu·∫ø = L∆∞∆°ng gross - B·∫£o hi·ªÉm
  const taxableIncome = grossSalary - insuranceCalc.total;
  
  // 3. C√°c kho·∫£n gi·∫£m tr·ª´
  const personalDeduction = PERSONAL_DEDUCTION;
  const dependentDeduction = dependents * DEPENDENT_DEDUCTION;
  const totalDeduction = personalDeduction + dependentDeduction;
  
  // 4. Thu nh·∫≠p t√≠nh thu·∫ø = Thu nh·∫≠p ch·ªãu thu·∫ø - T·ªïng gi·∫£m tr·ª´
  const taxableBase = Math.max(0, taxableIncome - totalDeduction);
  
  // 5. T√≠nh thu·∫ø theo t·ª´ng b·∫≠c l≈©y ti·∫øn
  let totalTax = 0;
  let remainingIncome = taxableBase;
  const breakdown: TaxBracket[] = [];
  let marginalRate = 0; // Thu·∫ø su·∫•t c·∫≠n bi√™n
  
  for (const bracket of TAX_BRACKETS) {
    if (remainingIncome <= 0) break;
    
    const bracketRange = bracket.max - bracket.min;
    const taxableAmount = Math.min(remainingIncome, bracketRange);
    const taxOwed = taxableAmount * bracket.rate;
    
    if (taxableAmount > 0) {
      breakdown.push({
        range: `${formatMoney(bracket.min)} - ${bracket.max === Infinity ? 'tr·ªü l√™n' : formatMoney(bracket.max)}`,
        rate: `${(bracket.rate * 100).toFixed(0)}%`,
        taxableAmount: formatMoney(taxableAmount),
        taxOwed: formatMoney(taxOwed),
        description: bracket.description
      });
      
      totalTax += taxOwed;
      remainingIncome -= taxableAmount;
      marginalRate = bracket.rate; // C·∫≠p nh·∫≠t thu·∫ø su·∫•t c·∫≠n bi√™n
    }
  }
  
  // 6. L∆∞∆°ng net = L∆∞∆°ng gross - B·∫£o hi·ªÉm - Thu·∫ø
  const netSalary = grossSalary - insuranceCalc.total - totalTax;
  
  // 7. Thu·∫ø su·∫•t hi·ªáu qu·∫£
  const effectiveRate = grossSalary > 0 ? (totalTax / grossSalary) * 100 : 0;
  
  return {
    grossSalary,
    insurance: insuranceCalc.total,
    insuranceDetails: {
      social: insuranceCalc.social,
      health: insuranceCalc.health,
      unemployment: insuranceCalc.unemployment
    },
    taxableIncome,
    totalDeduction,
    personalDeduction,
    dependentDeduction,
    taxableBase,
    totalTax,
    netSalary,
    breakdown,
    effectiveRate,
    marginalRate: marginalRate * 100
  };
}

export default function NewTaxCalculator() {
  const [grossSalary, setGrossSalary] = useState<string>('');
  const [dependents, setDependents] = useState<string>('0');
  const [showResult, setShowResult] = useState(false);
  const [result, setResult] = useState<TaxResult | null>(null);
  const [showComparison, setShowComparison] = useState(false);

  const handleCalculate = () => {
    const gross = parseFloat(grossSalary) || 0;
    const deps = parseInt(dependents) || 0;
    
    if (gross <= 0) {
      alert('Vui l√≤ng nh·∫≠p l∆∞∆°ng gross h·ª£p l·ªá!');
      return;
    }
    
    const calculation = calculateTax(gross, deps);
    setResult(calculation);
    setShowResult(true);
  };

  const handleReset = () => {
    setGrossSalary('');
    setDependents('0');
    setShowResult(false);
    setResult(null);
    setShowComparison(false);
  };

  // T√≠nh to√°n so s√°nh v·ªõi c√°c m·ª©c l∆∞∆°ng kh√°c nhau
  const getComparisons = () => {
    if (!result) return [];
    
    const currentGross = result.grossSalary;
    const deps = Math.round(result.dependentDeduction / DEPENDENT_DEDUCTION);
    
    const comparisons = [
      currentGross * 0.8,
      currentGross * 0.9,
      currentGross,
      currentGross * 1.1,
      currentGross * 1.2
    ].map(gross => ({
      gross,
      ...calculateTax(gross, deps)
    }));
    
    return comparisons;
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-6xl mx-auto px-4">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            üßÆ M√°y t√≠nh thu·∫ø TNCN 2024
          </h1>
          <p className="text-gray-600 text-lg">
            T√≠nh thu·∫ø thu nh·∫≠p c√° nh√¢n ch√≠nh x√°c theo lu·∫≠t Vi·ªát Nam
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Input Form */}
          <div className="bg-white rounded-lg shadow-md p-6">
            <h2 className="text-2xl font-semibold mb-6 text-gray-800">
              üìù Nh·∫≠p th√¥ng tin
            </h2>
            
            <div className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  L∆∞∆°ng gross (VND/th√°ng) *
                </label>
                <input
                  type="number"
                  value={grossSalary}
                  onChange={(e) => setGrossSalary(e.target.value)}
                  placeholder="V√≠ d·ª•: 20000000"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-right text-lg"
                />
                <p className="text-xs text-gray-500 mt-1">
                  L∆∞∆°ng tr∆∞·ªõc thu·∫ø v√† b·∫£o hi·ªÉm
                </p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  S·ªë ng∆∞·ªùi ph·ª• thu·ªôc
                </label>
                <input
                  type="number"
                  value={dependents}
                  onChange={(e) => setDependents(e.target.value)}
                  min="0"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-right text-lg"
                />
                <p className="text-xs text-gray-500 mt-1">
                  M·ªói ng∆∞·ªùi ph·ª• thu·ªôc ƒë∆∞·ª£c gi·∫£m tr·ª´ {formatMoney(DEPENDENT_DEDUCTION)}/th√°ng
                </p>
              </div>              {/* Action Buttons */}
              <div className="flex gap-4 pt-4">
                <button
                  onClick={handleCalculate}
                  className="flex-1 bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200"
                >
                  üßÆ T√≠nh thu·∫ø
                </button>
                <button
                  onClick={handleReset}
                  className="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 font-semibold py-3 px-6 rounded-lg transition-colors duration-200"
                >
                  üîÑ Reset
                </button>
              </div>

              {/* Quick Examples */}
              <div className="mt-6 p-4 bg-yellow-50 rounded-lg">
                <h4 className="font-medium text-yellow-800 mb-3">‚ö° V√≠ d·ª• nhanh:</h4>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
                  {[
                    { label: 'Sinh vi√™n m·ªõi', salary: 8_000_000 },
                    { label: 'Nh√¢n vi√™n', salary: 15_000_000 },
                    { label: 'Tr∆∞·ªüng nh√≥m', salary: 25_000_000 },
                    { label: 'Qu·∫£n l√Ω', salary: 40_000_000 }
                  ].map((example, index) => (
                    <button
                      key={index}
                      onClick={() => {
                        setGrossSalary(example.salary.toString());
                        setDependents('0');
                      }}
                      className="text-xs bg-white hover:bg-yellow-100 border border-yellow-200 rounded p-2 text-center transition-colors"
                    >
                      <div className="font-medium text-yellow-800">{example.label}</div>
                      <div className="text-yellow-600">{formatMoney(example.salary)}</div>
                    </button>
                  ))}
                </div>
              </div>
            </div>            {/* Quick Info */}
            <div className="mt-8 p-4 bg-blue-50 rounded-lg">
              <h3 className="font-semibold text-blue-900 mb-3">üí° Th√¥ng tin quy ƒë·ªãnh thu·∫ø TNCN 2024:</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-blue-800">
                <div>
                  <h4 className="font-medium mb-2">üìã Gi·∫£m tr·ª´ gia c·∫£nh:</h4>
                  <ul className="space-y-1">
                    <li>‚Ä¢ B·∫£n th√¢n: {formatMoney(PERSONAL_DEDUCTION)}/th√°ng</li>
                    <li>‚Ä¢ Ng∆∞·ªùi ph·ª• thu·ªôc: {formatMoney(DEPENDENT_DEDUCTION)}/th√°ng</li>
                  </ul>
                </div>
                <div>
                  <h4 className="font-medium mb-2">üè• B·∫£o hi·ªÉm x√£ h·ªôi:</h4>
                  <ul className="space-y-1">
                    <li>‚Ä¢ BHXH: 8% (t·ªëi ƒëa {formatMoney(MAX_INSURANCE_SALARY)})</li>
                    <li>‚Ä¢ BHYT: 1.5%</li>
                    <li>‚Ä¢ BHTN: 1%</li>
                    <li>‚Ä¢ T·ªïng c·ªông: 10.5%</li>
                  </ul>
                </div>
                <div className="md:col-span-2">
                  <h4 className="font-medium mb-2">üìä Bi·ªÉu thu·∫ø l≈©y ti·∫øn:</h4>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-2 text-xs">
                    {TAX_BRACKETS.map((bracket, index) => (
                      <div key={index} className="bg-white p-2 rounded">
                        <div className="font-medium">{bracket.description}</div>
                        <div className="text-blue-600">{(bracket.rate * 100).toFixed(0)}%</div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
              <div className="mt-3 p-2 bg-blue-100 rounded text-xs text-blue-700">
                <strong>L∆∞u √Ω:</strong> C√¥ng c·ª• n√†y t√≠nh theo quy ƒë·ªãnh hi·ªán h√†nh c·ªßa Lu·∫≠t thu·∫ø TNCN. 
                K·∫øt qu·∫£ ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o, m·ª©c thu·∫ø th·ª±c t·∫ø c√≥ th·ªÉ kh√°c nhau t√πy v√†o t√¨nh h√¨nh c·ª• th·ªÉ.
              </div>
            </div>
          </div>

          {/* Results */}
          <div className="bg-white rounded-lg shadow-md p-6">
            {!showResult ? (
              <div className="flex items-center justify-center h-full">
                <div className="text-center text-gray-500">
                  <div className="text-6xl mb-4">üìä</div>
                  <h3 className="text-xl font-semibold mb-2">Ch∆∞a c√≥ k·∫øt qu·∫£</h3>
                  <p className="text-gray-400">
                    Nh·∫≠p th√¥ng tin b√™n tr√°i v√† nh·∫•n &quot;T√≠nh thu·∫ø&quot;
                  </p>
                </div>
              </div>
            ) : result ? (
              <div>
                <h2 className="text-2xl font-semibold mb-6 text-gray-800">
                  üìà K·∫øt qu·∫£ t√≠nh thu·∫ø
                </h2>                {/* Summary Cards */}
                <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 mb-6">
                  <div className="bg-blue-50 p-4 rounded-lg text-center">
                    <div className="text-sm text-blue-600 font-medium">L∆∞∆°ng Gross</div>
                    <div className="text-lg font-bold text-blue-700">
                      {formatMoney(result.grossSalary)}
                    </div>
                  </div>
                  <div className="bg-red-50 p-4 rounded-lg text-center">
                    <div className="text-sm text-red-600 font-medium">Thu·∫ø + BH</div>
                    <div className="text-lg font-bold text-red-700">
                      {formatMoney(result.totalTax + result.insurance)}
                    </div>
                  </div>
                  <div className="bg-green-50 p-4 rounded-lg text-center">
                    <div className="text-sm text-green-600 font-medium">L∆∞∆°ng Net</div>
                    <div className="text-lg font-bold text-green-700">
                      {formatMoney(result.netSalary)}
                    </div>
                  </div>
                </div>

                {/* Detailed Breakdown */}
                <div className="space-y-4">
                  <h3 className="font-semibold text-gray-800">Chi ti·∫øt t√≠nh to√°n:</h3>
                  
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between py-2 border-b">
                      <span>üí∞ L∆∞∆°ng gross</span>
                      <span className="font-medium">{formatMoney(result.grossSalary)}</span>
                    </div>
                    
                    {/* Chi ti·∫øt b·∫£o hi·ªÉm */}
                    <div className="bg-red-50 p-3 rounded">
                      <div className="flex justify-between py-1 text-red-600 font-medium">
                        <span>(-) B·∫£o hi·ªÉm (10.5%)</span>
                        <span>-{formatMoney(result.insurance)}</span>
                      </div>
                      <div className="ml-4 space-y-1 text-xs text-red-500">
                        <div className="flex justify-between">
                          <span>‚Ä¢ BHXH (8%)</span>
                          <span>{formatMoney(result.insuranceDetails.social)}</span>
                        </div>
                        <div className="flex justify-between">
                          <span>‚Ä¢ BHYT (1.5%)</span>
                          <span>{formatMoney(result.insuranceDetails.health)}</span>
                        </div>
                        <div className="flex justify-between">
                          <span>‚Ä¢ BHTN (1%)</span>
                          <span>{formatMoney(result.insuranceDetails.unemployment)}</span>
                        </div>
                      </div>
                    </div>
                    
                    <div className="flex justify-between py-2 border-b">
                      <span>üìã Thu nh·∫≠p ch·ªãu thu·∫ø</span>
                      <span className="font-medium">{formatMoney(result.taxableIncome)}</span>
                    </div>
                    
                    {/* Chi ti·∫øt gi·∫£m tr·ª´ */}
                    <div className="bg-blue-50 p-3 rounded">
                      <div className="flex justify-between py-1 text-blue-600 font-medium">
                        <span>(-) T·ªïng gi·∫£m tr·ª´</span>
                        <span>-{formatMoney(result.totalDeduction)}</span>
                      </div>
                      <div className="ml-4 space-y-1 text-xs text-blue-500">
                        <div className="flex justify-between">
                          <span>‚Ä¢ Gi·∫£m tr·ª´ b·∫£n th√¢n</span>
                          <span>{formatMoney(result.personalDeduction)}</span>
                        </div>
                        {result.dependentDeduction > 0 && (
                          <div className="flex justify-between">
                            <span>‚Ä¢ Ng∆∞·ªùi ph·ª• thu·ªôc ({Math.round(result.dependentDeduction / DEPENDENT_DEDUCTION)} ng∆∞·ªùi)</span>
                            <span>{formatMoney(result.dependentDeduction)}</span>
                          </div>
                        )}
                      </div>
                    </div>
                    
                    <div className="flex justify-between py-2 border-b">
                      <span>üìä Thu nh·∫≠p t√≠nh thu·∫ø</span>
                      <span className="font-medium">{formatMoney(result.taxableBase)}</span>
                    </div>
                    <div className="flex justify-between py-2 text-red-600">
                      <span>(-) Thu·∫ø TNCN</span>
                      <span className="font-medium">-{formatMoney(result.totalTax)}</span>
                    </div>
                    <div className="flex justify-between py-3 border-t-2 bg-green-50 px-3 rounded font-semibold text-green-700">
                      <span>üíµ L∆∞∆°ng net nh·∫≠n v·ªÅ</span>
                      <span className="text-xl">{formatMoney(result.netSalary)}</span>
                    </div>
                  </div>

                  {/* Tax Brackets */}
                  {result.breakdown.length > 0 && (
                    <div className="mt-6">
                      <h3 className="font-semibold text-gray-800 mb-3">üìà Thu·∫ø theo t·ª´ng b·∫≠c l≈©y ti·∫øn:</h3>
                      <div className="space-y-2">
                        {result.breakdown.map((bracket: TaxBracket, index: number) => (
                          <div key={index} className="flex justify-between items-center p-3 bg-gray-50 rounded">
                            <div>
                              <span className="text-sm text-gray-600">{bracket.description}: {bracket.range}</span>
                              <span className="ml-2 text-blue-600 font-medium">({bracket.rate})</span>
                            </div>
                            <div className="text-right">
                              <div className="text-sm text-gray-500">{bracket.taxableAmount}</div>
                              <div className="font-medium text-red-600">{bracket.taxOwed}</div>
                            </div>
                          </div>
                        ))}
                      </div>
                      <div className="mt-4 p-3 bg-yellow-50 rounded">
                        <div className="grid grid-cols-2 gap-4 text-sm">
                          <div>
                            <span className="text-yellow-700">Thu·∫ø su·∫•t hi·ªáu qu·∫£:</span>
                            <span className="font-medium ml-2">{result.effectiveRate.toFixed(2)}%</span>
                          </div>
                          <div>
                            <span className="text-yellow-700">Thu·∫ø su·∫•t c·∫≠n bi√™n:</span>
                            <span className="font-medium ml-2">{result.marginalRate.toFixed(0)}%</span>
                          </div>
                        </div>
                      </div>
                    </div>                  )}
                </div>
              </div>
            ) : (
              <div className="flex items-center justify-center h-full">
                <div className="text-center text-gray-500">
                  <div className="text-6xl mb-4">‚ö†Ô∏è</div>
                  <h3 className="text-xl font-semibold mb-2">L·ªói hi·ªÉn th·ªã</h3>
                  <p className="text-gray-400">
                    Vui l√≤ng th·ª≠ l·∫°i
                  </p>                      </div>
                    </div>
                  )}

                  {/* Comparison Tool */}
                  <div className="mt-6 p-4 bg-gray-50 rounded-lg">
                    <div className="flex justify-between items-center mb-3">
                      <h3 className="font-semibold text-gray-800">üìä So s√°nh m·ª©c l∆∞∆°ng</h3>
                      <button
                        onClick={() => setShowComparison(!showComparison)}
                        className="text-blue-600 hover:text-blue-800 text-sm font-medium"
                      >
                        {showComparison ? '·∫®n' : 'Hi·ªÉn th·ªã'} so s√°nh
                      </button>
                    </div>
                    
                    {showComparison && (
                      <div className="overflow-x-auto">
                        <table className="w-full text-xs">
                          <thead>
                            <tr className="bg-gray-100">
                              <th className="text-left p-2">L∆∞∆°ng Gross</th>
                              <th className="text-right p-2">B·∫£o hi·ªÉm</th>
                              <th className="text-right p-2">Thu·∫ø TNCN</th>
                              <th className="text-right p-2">L∆∞∆°ng Net</th>
                              <th className="text-right p-2">Thu·∫ø su·∫•t</th>
                            </tr>
                          </thead>
                          <tbody>
                            {getComparisons().map((comp, index) => (
                              <tr key={index} className={comp.grossSalary === (result?.grossSalary || 0) ? 'bg-blue-50 font-medium' : ''}>
                                <td className="p-2">{formatMoney(comp.grossSalary)}</td>
                                <td className="text-right p-2">{formatMoney(comp.insurance)}</td>
                                <td className="text-right p-2">{formatMoney(comp.totalTax)}</td>
                                <td className="text-right p-2">{formatMoney(comp.netSalary)}</td>
                                <td className="text-right p-2">{comp.effectiveRate.toFixed(1)}%</td>
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </div>
                    )}
                  </div>
          </div>
        </div>
      </div>
    </div>
  );
}
