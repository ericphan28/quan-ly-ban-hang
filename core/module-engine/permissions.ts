// Permission system for modules
export interface Permission {
  id: string;
  name: string;
  description: string;
  category: 'storage' | 'network' | 'ui' | 'system' | 'user';
  level: 'low' | 'medium' | 'high' | 'critical';
  requiredFor?: string[]; // Module functions that need this permission
}

export interface ModulePermissions {
  moduleId: string;
  grantedPermissions: string[];
  deniedPermissions: string[];
  grantedAt: Date;
  grantedBy: string; // user id
}

// Standard permission definitions
export const STANDARD_PERMISSIONS: Permission[] = [
  // Storage permissions
  {
    id: 'storage.read',
    name: 'ƒê·ªçc d·ªØ li·ªáu c·ª•c b·ªô',
    description: 'Cho ph√©p module ƒë·ªçc d·ªØ li·ªáu ƒë√£ l∆∞u tr∆∞·ªõc ƒë√≥',
    category: 'storage',
    level: 'low'
  },
  {
    id: 'storage.write',
    name: 'Ghi d·ªØ li·ªáu c·ª•c b·ªô',
    description: 'Cho ph√©p module l∆∞u d·ªØ li·ªáu v√†o m√°y t√≠nh',
    category: 'storage',
    level: 'medium'
  },
  {
    id: 'storage.delete',
    name: 'X√≥a d·ªØ li·ªáu c·ª•c b·ªô',
    description: 'Cho ph√©p module x√≥a d·ªØ li·ªáu ƒë√£ l∆∞u',
    category: 'storage',
    level: 'medium'
  },
  
  // Network permissions
  {
    id: 'network.http',
    name: 'Truy c·∫≠p m·∫°ng HTTP',
    description: 'Cho ph√©p module g·ª≠i y√™u c·∫ßu HTTP ƒë·∫øn c√°c website',
    category: 'network',
    level: 'high'
  },
  {
    id: 'network.api',
    name: 'G·ªçi API b√™n ngo√†i',
    description: 'Cho ph√©p module k·∫øt n·ªëi v·ªõi c√°c d·ªãch v·ª• API b√™n ngo√†i',
    category: 'network',
    level: 'high'
  },
  {
    id: 'network.download',
    name: 'T·∫£i file t·ª´ internet',
    description: 'Cho ph√©p module t·∫£i c√°c file t·ª´ internet',
    category: 'network',
    level: 'critical'
  },
  
  // UI permissions
  {
    id: 'ui.notifications',
    name: 'Hi·ªÉn th·ªã th√¥ng b√°o',
    description: 'Cho ph√©p module hi·ªÉn th·ªã th√¥ng b√°o cho ng∆∞·ªùi d√πng',
    category: 'ui',
    level: 'low'
  },
  {
    id: 'ui.modals',
    name: 'Hi·ªÉn th·ªã c·ª≠a s·ªï popup',
    description: 'Cho ph√©p module m·ªü c√°c c·ª≠a s·ªï popup',
    category: 'ui',
    level: 'medium'
  },
  {
    id: 'ui.fullscreen',
    name: 'Ch·∫ø ƒë·ªô to√†n m√†n h√¨nh',
    description: 'Cho ph√©p module chuy·ªÉn sang ch·∫ø ƒë·ªô to√†n m√†n h√¨nh',
    category: 'ui',
    level: 'high'
  },
  
  // System permissions
  {
    id: 'system.info',
    name: 'ƒê·ªçc th√¥ng tin h·ªá th·ªëng',
    description: 'Cho ph√©p module ƒë·ªçc th√¥ng tin v·ªÅ h·ªá th·ªëng v√† tr√¨nh duy·ªát',
    category: 'system',
    level: 'medium'
  },
  {
    id: 'system.clipboard',
    name: 'Truy c·∫≠p clipboard',
    description: 'Cho ph√©p module ƒë·ªçc/ghi n·ªôi dung clipboard',
    category: 'system',
    level: 'high'
  },
  {
    id: 'system.geolocation',
    name: 'Truy c·∫≠p v·ªã tr√≠ ƒë·ªãa l√Ω',
    description: 'Cho ph√©p module bi·∫øt v·ªã tr√≠ ƒë·ªãa l√Ω c·ªßa ng∆∞·ªùi d√πng',
    category: 'system',
    level: 'critical'
  },
  
  // User permissions
  {
    id: 'user.profile',
    name: 'ƒê·ªçc th√¥ng tin ng∆∞·ªùi d√πng',
    description: 'Cho ph√©p module ƒë·ªçc th√¥ng tin c√° nh√¢n c·ªßa ng∆∞·ªùi d√πng',
    category: 'user',
    level: 'high'
  },
  {
    id: 'user.preferences',
    name: 'Thay ƒë·ªïi c√†i ƒë·∫∑t',
    description: 'Cho ph√©p module thay ƒë·ªïi c√†i ƒë·∫∑t ng∆∞·ªùi d√πng',
    category: 'user',
    level: 'critical'
  }
];

export class PermissionManager {
  private modulePermissions = new Map<string, ModulePermissions>();
  
  constructor() {
    this.loadPermissions();
  }

  // Check if module has specific permission
  hasPermission(moduleId: string, permissionId: string): boolean {
    const permissions = this.modulePermissions.get(moduleId);
    if (!permissions) return false;
    
    return permissions.grantedPermissions.includes(permissionId);
  }

  // Request permission from user
  async requestPermission(moduleId: string, permissionId: string): Promise<boolean> {
    const permission = STANDARD_PERMISSIONS.find(p => p.id === permissionId);
    if (!permission) {
      console.error(`Unknown permission: ${permissionId}`);
      return false;
    }

    // Check if already granted
    if (this.hasPermission(moduleId, permissionId)) {
      return true;
    }

    // Show permission request dialog
    const granted = await this.showPermissionDialog(moduleId, permission);
    
    if (granted) {
      this.grantPermission(moduleId, permissionId);
    } else {
      this.denyPermission(moduleId, permissionId);
    }
    
    return granted;
  }

  // Grant permission to module
  private grantPermission(moduleId: string, permissionId: string): void {
    let permissions = this.modulePermissions.get(moduleId);
    
    if (!permissions) {
      permissions = {
        moduleId,
        grantedPermissions: [],
        deniedPermissions: [],
        grantedAt: new Date(),
        grantedBy: 'current-user' // TODO: Get real user ID
      };
      this.modulePermissions.set(moduleId, permissions);
    }
    
    if (!permissions.grantedPermissions.includes(permissionId)) {
      permissions.grantedPermissions.push(permissionId);
      
      // Remove from denied if it was there
      const deniedIndex = permissions.deniedPermissions.indexOf(permissionId);
      if (deniedIndex > -1) {
        permissions.deniedPermissions.splice(deniedIndex, 1);
      }
    }
    
    this.savePermissions();
    console.log(`‚úÖ Granted permission ${permissionId} to module ${moduleId}`);
  }

  // Deny permission to module
  private denyPermission(moduleId: string, permissionId: string): void {
    let permissions = this.modulePermissions.get(moduleId);
    
    if (!permissions) {
      permissions = {
        moduleId,
        grantedPermissions: [],
        deniedPermissions: [],
        grantedAt: new Date(),
        grantedBy: 'current-user'
      };
      this.modulePermissions.set(moduleId, permissions);
    }
    
    if (!permissions.deniedPermissions.includes(permissionId)) {
      permissions.deniedPermissions.push(permissionId);
      
      // Remove from granted if it was there
      const grantedIndex = permissions.grantedPermissions.indexOf(permissionId);
      if (grantedIndex > -1) {
        permissions.grantedPermissions.splice(grantedIndex, 1);
      }
    }
    
    this.savePermissions();
    console.log(`‚ùå Denied permission ${permissionId} to module ${moduleId}`);
  }

  // Revoke all permissions for a module
  revokeAllPermissions(moduleId: string): void {
    this.modulePermissions.delete(moduleId);
    this.savePermissions();
    console.log(`üîÑ Revoked all permissions for module ${moduleId}`);
  }

  // Get all permissions for a module
  getModulePermissions(moduleId: string): ModulePermissions | null {
    return this.modulePermissions.get(moduleId) || null;
  }

  // Get all modules with permissions
  getAllModulePermissions(): ModulePermissions[] {
    return Array.from(this.modulePermissions.values());
  }

  // Show permission request dialog to user
  private async showPermissionDialog(moduleId: string, permission: Permission): Promise<boolean> {
    // Create permission request UI
    const message = `
Module "${moduleId}" y√™u c·∫ßu quy·ªÅn:

üîí ${permission.name}
üìù ${permission.description}
‚ö†Ô∏è M·ª©c ƒë·ªô: ${this.getLevelDisplay(permission.level)}
üìÇ Lo·∫°i: ${this.getCategoryDisplay(permission.category)}

B·∫°n c√≥ mu·ªën c·∫•p quy·ªÅn n√†y?
    `;
    
    // Simple confirm dialog for now - TODO: Create proper UI
    return confirm(message);
  }

  private getLevelDisplay(level: string): string {
    switch (level) {
      case 'low': return 'üü¢ Th·∫•p';
      case 'medium': return 'üü° Trung b√¨nh';
      case 'high': return 'üü† Cao';
      case 'critical': return 'üî¥ R·∫•t cao';
      default: return level;
    }
  }

  private getCategoryDisplay(category: string): string {
    switch (category) {
      case 'storage': return 'üíæ L∆∞u tr·ªØ';
      case 'network': return 'üåê M·∫°ng';
      case 'ui': return 'üñ•Ô∏è Giao di·ªán';
      case 'system': return '‚öôÔ∏è H·ªá th·ªëng';
      case 'user': return 'üë§ Ng∆∞·ªùi d√πng';
      default: return category;
    }
  }

  // Load permissions from storage
  private loadPermissions(): void {
    if (typeof window === 'undefined') return;
    
    try {
      const stored = localStorage.getItem('module_permissions');
      if (stored) {
        const permissions = JSON.parse(stored);
        permissions.forEach((perm: ModulePermissions) => {
          this.modulePermissions.set(perm.moduleId, {
            ...perm,
            grantedAt: new Date(perm.grantedAt)
          });
        });
      }
    } catch (error) {
      console.error('Failed to load permissions:', error);
    }
  }

  // Save permissions to storage
  private savePermissions(): void {
    if (typeof window === 'undefined') return;
    
    try {
      const permissions = Array.from(this.modulePermissions.values());
      localStorage.setItem('module_permissions', JSON.stringify(permissions));
    } catch (error) {
      console.error('Failed to save permissions:', error);
    }
  }
}

// Global permission manager instance
export const permissionManager = new PermissionManager();
